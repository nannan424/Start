//这个是接受者这方，写的比较多，这个类似于A-B-A
EventBus3.0有四种线程模型，分别是：

POSTING (默认) 表示事件处理函数的线程跟发布事件的线程在同一个线程。
MAIN 表示事件处理函数的线程在主线程(UI)线程，因此在这里不能进行耗时操作。
BACKGROUND 表示事件处理函数的线程在后台线程，因此不能进行UI操作。如果发布事件的线程是主线程(UI线程)，那么事件处理函数将会开启一个后台线程，如果果发布事件的线程是在后台线程，那么事件处理函数就使用该线程。
ASYNC 表示无论事件发布的线程是哪一个，事件处理函数始终会新建一个子线程运行，同样不能进行UI操作。
 @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //先注册
        if (!EventBus.getDefault().isRegistered(this)) {
            EventBus.getDefault().register(this);
        }
        initView();
    }
//记得销毁啊


    //方法

    @Subscribe(threadMode = BACKGROUND)//这个是 @Subscribe(threadMode = ASYNC)也可以
    public void aaa(String mag) {
//        Toast.makeText(this, mag, Toast.LENGTH_SHORT).show();
        Log.d("mag","mag"+mag);
    }

 @Override
    public void onClick(View v) {
        switch (v.getId()) {
            default:
                break;
            case R.id.tv:
                startActivity(new Intent(this,BActivity.class));//点击跳回去
                break;
        }
    }